Dossiê do Projeto: Conversor Estruturado de Conteúdo HTML com Tags Personalizadas
Data de Criação do Dossiê: 6 de maio de 2025
Autor do Dossiê: Assistente IA Gemini
Versão do Dossiê: 1.0

Índice:

Introdução e Visão Geral do Projeto 1.1. O que é o Projeto? 1.2. Problema Principal a Ser Resolvido 1.3. Objetivos Chave 1.4. Escopo do Projeto
Contexto e Justificativa 2.1. Necessidade do Projeto 2.2. Público-Alvo e Beneficiários
Arquitetura e Design da Solução Proposta 3.1. Formato de Entrada: HTML com Tags Personalizadas 3.2. Formato de Saída: Estrutura JSON Hierárquica 3.3. Fluxo Geral de Processamento de Dados 3.4. Tecnologias Envolvidas
Detalhamento Funcional e Lógica de Conversão 4.1. Identificação e Extração de Blocos Estruturais 4.2. Mapeamento de Tags Personalizadas para Propriedades JSON 4.3. Tratamento de Conteúdo HTML Padrão Interno 4.4. Regras Específicas de Tipagem e Estruturação
Histórico e Tentativas Anteriores (Evolução até Agora) 5.1. Esboço Inicial (Referência à Imagem Anexada) 5.2. Desenvolvimento da Solução em JavaScript
Equipes Envolvidas (Hipótese e Contextualização)
Fluxo do Projeto (Desenvolvimento e Implementação)
Desafios Identificados e Considerações Técnicas 8.1. Robustez do Parser 8.2. Flexibilidade e Escalabilidade 8.3. Tratamento de Erros e Casos Inesperados 8.4. Dependência do DOM (para a solução JavaScript)
Próximos Passos e Evolução Potencial
Conclusão
1. Introdução e Visão Geral do Projeto
1.1. O que é o Projeto?
O projeto consiste no desenvolvimento de um sistema (atualmente um script JavaScript) capaz de analisar (ou "parsear") um conteúdo textual formatado com tags HTML padrão e um conjunto de tags personalizadas (ex: {{topico}}, {{secao}}, {{titulo_aula}}). O objetivo final é converter essa entrada mista em uma estrutura de dados JSON hierárquica e bem definida. Essa estrutura JSON resultante deve representar de forma lógica e organizada o conteúdo original, facilitando seu uso posterior por outras aplicações, sistemas de gerenciamento de conteúdo (CMS), plataformas de aprendizado ou para renderização dinâmica em interfaces de usuário.

1.2. Problema Principal a Ser Resolvido
A necessidade fundamental é traduzir um formato de conteúdo "semiestruturado", que é amigável para edição humana (misturando HTML com tags customizadas que denotam significado específico), em um formato "estruturado" (JSON) que é facilmente processável por máquinas. Sem essa conversão, o conteúdo com tags personalizadas não seria diretamente interpretável por sistemas que esperam dados em formatos padronizados como JSON.

1.3. Objetivos Chave
Análise Precisa: Identificar corretamente as tags personalizadas de abertura e fechamento e o conteúdo entre elas.
Estruturação Hierárquica: Mapear a relação de aninhamento das tags personalizadas (ex: {{secao}} dentro de {{topico}}) para a estrutura hierárquica do JSON.
Extração de Metadados: Capturar informações específicas contidas dentro de certas tags personalizadas (ex: o texto de {{titulo_topico}} ou o atributo link de {{anterior}}).
Preservação de Conteúdo HTML: Manter o conteúdo HTML padrão (parágrafos, listas, formatação de texto como <strong> ou <em>) dentro dos blocos correspondentes na estrutura JSON.
Tipificação: Atribuir tipos específicos (ex: "cabecalho", "corpo", "paragrafo", "lista") aos diferentes nós da estrutura JSON, conforme a semântica das tags originais e sua posição.
Saída Consistente: Gerar um objeto JSON que siga um esquema predefinido, facilitando a sua consumação.
1.4. Escopo do Projeto
Entrada: Uma string contendo HTML e as tags personalizadas definidas (ex: {{topico}}, {{secao}}, {{titulo_topico}}, {{titulo_aula}}, {{anterior}}, {{proximo}} e suas respectivas tags de fechamento).
Saída: Um objeto JSON estruturado conforme o modelo fornecido na solicitação inicial.
Funcionalidade Principal: Parsing da string de entrada e construção do objeto JSON.
Fora do Escopo (Inicial):
Interface gráfica para o usuário.
Validação complexa de sintaxe de HTML ou das tags personalizadas (além do reconhecimento básico).
Suporte a um conjunto ilimitado ou dinâmico de tags personalizadas (o conjunto atual é fixo).
Geração do HTML original a partir do JSON (conversão reversa).
2. Contexto e Justificativa
2.1. Necessidade do Projeto
Este projeto surge da necessidade de gerenciar e utilizar conteúdo que possui uma estrutura semântica específica, mas que precisa ser criado ou mantido em um formato mais legível e editável do que JSON puro. As tags personalizadas permitem que autores de conteúdo adicionem significado e estrutura sem a complexidade de editar JSON diretamente. A conversão para JSON torna esse conteúdo utilizável por sistemas que requerem dados estruturados para exibição, armazenamento, indexação ou outras operações. Um exemplo prático seria um sistema de criação de aulas ou módulos de aprendizado, onde {{topico}} representa uma unidade de estudo, {{secao}} divide essa unidade, e tags como {{titulo_aula}} fornecem metadados essenciais.

2.2. Público-Alvo e Beneficiários
Desenvolvedores: Que precisam integrar esse conteúdo estruturado em aplicações web, plataformas de e-learning, ou outros sistemas.
Autores/Criadores de Conteúdo: Que podem se beneficiar de um formato de autoria mais simples com tags semânticas, sabendo que ele será transformado em uma estrutura robusta.
Sistemas de Gerenciamento de Conteúdo (CMS): Que podem usar o parser para importar/converter conteúdo de um formato para outro.
3. Arquitetura e Design da Solução Proposta
3.1. Formato de Entrada: HTML com Tags Personalizadas
A entrada é uma string de texto que se assemelha a um documento HTML, mas com a inclusão de tags especiais no formato {{nome_da_tag}} e {{/nome_da_tag}} para fechamento. Algumas tags podem conter atributos, como {{anterior link=/123}}.

Principais Tags Personalizadas Identificadas:

{{topico}}...{{/topico}}: Define o bloco principal do conteúdo.
{{secao}}...{{/secao}}: Define sub-blocos dentro de um topico.
{{titulo_topico}}...{{/titulo_topico}}: Define o título principal de uma apresentação/aula dentro de uma secao de cabeçalho.
{{titulo_aula}}...{{/titulo_aula}}: Define o título específico da aula, também em uma secao de cabeçalho.
{{anterior link=VALOR}}...{{/anterior}}: Define um link para o conteúdo anterior, geralmente no rodapé do topico.
{{proximo link=VALOR}}...{{/proximo}}: Define um link para o próximo conteúdo, geralmente no rodapé do topico.
O conteúdo entre essas tags personalizadas pode incluir HTML padrão como <p>, <ul>, <li>, <strong>, <em>, etc.

3.2. Formato de Saída: Estrutura JSON Hierárquica
A saída desejada é um objeto JSON que reflete a estrutura aninhada do conteúdo de entrada.

Estrutura Geral do JSON de Saída (baseado no exemplo fornecido):

JSON

{
  "1": { // Representa o primeiro (e único, neste caso) {{topico}}
    "1": { // Representa a primeira {{secao}} dentro do {{topico}}
      "name": "secao",
      "type": "cabecalho", // Inferido pela presença de titulo_topico/titulo_aula
      "titulo_topico": "...",
      "titulo_aula": "..."
    },
    "2": { // Representa a segunda {{secao}}
      "name": "secao",
      "type": "corpo", // Inferido pela ausência de títulos e presença de conteúdo genérico
      "content": [
        { "name": "paragrafo", "content": "..." },
        { "name": "lista", "type": "numerada", "content": [
            { "name": "item", "content": "..." }
          ]
        }
      ]
    },
    // ... outras seções ...
    "X": { // Representa o agrupamento de informações de rodapé do {{topico}}
      "name": "topico", // Curiosamente nomeado "topico" no exemplo, mas representa o rodapé
      "type": "rodape",
      "anterior": "/123",
      "proximo": "/321"
    }
  }
}
As chaves numéricas ("1", "2") parecem indicar a ordem dos elementos.

3.3. Fluxo Geral de Processamento de Dados (na solução JavaScript atual)
Identificação do Bloco Principal: O script primeiro localiza o bloco de conteúdo delimitado por {{topico}} e {{/topico}}.
Segmentação de Seções e Rodapé: Dentro do bloco topico, o script:
Identifica e extrai sequencialmente os blocos {{secao}}...{{/secao}}.
Identifica e extrai informações das tags {{anterior ...}} e {{proximo ...}}.
Processamento de Cada Seção:
Para cada bloco secao, verifica a presença de tags de título ({{titulo_topico}}, {{titulo_aula}}).
Se presentes, a seção é classificada como type: "cabecalho", e os valores dos títulos são extraídos.
Se ausentes, a seção é classificada como type: "corpo".
O conteúdo HTML restante dentro da secao (após a remoção das tags de título, se houver) é passado para um parser de HTML.
Parseamento do Conteúdo HTML Interno:
Utiliza a API DOM do navegador (criando um elemento temporário e atribuindo innerHTML) para converter a string HTML em uma estrutura de nós DOM.
Itera sobre esses nós DOM para identificar parágrafos (<p>), listas (<ul>, <ol>), itens de lista (<li>), etc.
Converte cada elemento HTML reconhecido em um objeto JSON correspondente (ex: {name: "paragrafo", content: "..."}).
Construção do Objeto JSON Final:
Os objetos JSON resultantes de cada seção e do rodapé são agrupados e numerados dentro do objeto principal que representa o topico.
3.4. Tecnologias Envolvidas
Linguagem de Programação: JavaScript.
Manipulação de Strings e Padrões: Expressões Regulares (Regex) para identificar e extrair as tags personalizadas e seus conteúdos.
Parsing de HTML: API DOM do navegador (ex: document.createElement, innerHTML, childNodes, querySelectorAll).
Estrutura de Dados: Objetos e Arrays JavaScript para construir a estrutura JSON.
4. Detalhamento Funcional e Lógica de Conversão
4.1. Identificação e Extração de Blocos Estruturais
Regex são usados para encontrar os limites dos blocos {{topico}}, {{secao}}. A natureza "gulosa" vs. "não gulosa" (lazy) dos quantificadores Regex (como .*?) é crucial para capturar corretamente o conteúdo de cada bloco sem transbordar para o próximo.
A tag {{topico}} é o contêiner raiz. Dentro dele, múltiplas tags {{secao}} podem existir sequencialmente.
As tags {{anterior}} e {{proximo}} são tratadas como elementos especiais no nível do topico, geralmente para formar um rodapé.
4.2. Mapeamento de Tags Personalizadas para Propriedades JSON
{{topico}} (bloco externo): Mapeado para o objeto JSON raiz, indexado numericamente (ex: "1": {...}). O bloco de rodapé com links anterior/próximo também recebe name: "topico" no exemplo, o que pode ser uma convenção específica.
{{secao}}: Cada instância é mapeada para um objeto JSON dentro do topico pai, também indexado numericamente. Recebe a propriedade name: "secao".
{{titulo_topico}}Texto{{/titulo_topico}}: O texto interno é mapeado para a propriedade titulo_topico: "Texto" no objeto secao pai (tipo "cabecalho").
{{titulo_aula}}Texto{{/titulo_aula}}: Similarmente, mapeado para titulo_aula: "Texto" no objeto secao pai (tipo "cabecalho").
{{anterior link=VALOR}}: O VALOR do atributo link é mapeado para anterior: "VALOR" no objeto de rodapé.
{{proximo link=VALOR}}: O VALOR do atributo link é mapeado para proximo: "VALOR" no objeto de rodapé.
4.3. Tratamento de Conteúdo HTML Padrão Interno
Após a extração do conteúdo de uma {{secao}} (e remoção das tags de título, se for cabeçalho), o HTML restante é processado.
<p>...</p>: Convertido para { name: "paragrafo", content: "..." }, onde content contém o HTML interno do parágrafo.
<ul>...</ul> ou <ol>...</ol>: Convertido para { name: "lista", type: "numerada" (conforme exemplo), content: [...] }.
<li>...</li>: Cada item dentro da lista é convertido para { name: "item", content: "..." } e adicionado ao array content da lista.
Tags de formatação como <strong> e <em> são preservadas dentro da string content dos parágrafos ou itens de lista.
4.4. Regras Específicas de Tipagem e Estruturação
Tipagem de Seção:
Uma secao é do type: "cabecalho" se contiver as tags {{titulo_topico}} ou {{titulo_aula}}.
Caso contrário, é do type: "corpo".
Estrutura de Rodapé: As informações de {{anterior}} e {{proximo}} são agrupadas em um objeto separado, geralmente o último item dentro do topico, com type: "rodape".
Numeração: Os elementos topico (se houver mais de um no futuro) e secao (e o rodapé) são indexados com chaves numéricas em ordem de aparição.
5. Histórico e Tentativas Anteriores (Evolução até Agora)
5.1. Esboço Inicial (Referência à Imagem Anexada)
O desenvolvimento parece ter sido precedido por um esboço manual (conforme a imagem "Imagem do WhatsApp de 2025-04-26 à(s) 15.47.14_fbb4086a.jpg"). Este esboço visualiza a estrutura hierárquica:

Um {{TOPICO}} principal.
Múltiplas {{SECAO}}s dentro do tópico.
A SECAO 1 é mostrada contendo {{TITULO_TOPICO}} e {{TITULO_AULA}}, alinhando-se com a ideia de um "cabeçalho".
A SECAO 2 é mostrada com conteúdo textual genérico ("A REDE MUNICIPAL..."), alinhando-se com uma seção de "corpo".
A SECAO 3 (no esboço, mas que no JSON final se torna parte do rodapé do TOPICO) contém {{ANTERIOR}} e {{PROXIMO}}.
Este esboço foi fundamental para definir a estrutura de entrada e a lógica de aninhamento desejada.

5.2. Desenvolvimento da Solução em JavaScript
A principal tentativa até agora é a implementação de um script JavaScript (parseCustomHtml e a função auxiliar parseHtmlContent). Esta abordagem utiliza:

Expressões Regulares: Para a análise primária e segmentação dos blocos definidos pelas tags personalizadas.
API DOM: Para analisar o conteúdo HTML padrão encontrado dentro das seções. Esta é uma técnica comum para alavancar o parser HTML robusto e otimizado do navegador.
Esta solução visa atender aos requisitos de conversão conforme o formato JSON de saída especificado.

6. Equipes Envolvidas (Hipótese e Contextualização)
A informação sobre as equipes específicas envolvidas não foi fornecida. No entanto, em um cenário típico, projetos como este poderiam envolver:

Equipe de Desenvolvimento/Engenharia: Responsável por projetar, implementar, testar e manter o parser. (O solicitante parece ser o principal desenvolvedor ou está diretamente envolvido nesta fase).
Equipe de Conteúdo/Autoria: Responsável por criar e formatar o conteúdo usando as tags personalizadas e HTML. Eles seriam os usuários primários do formato de entrada.
Equipe de Produto/UX (possivelmente): Se este parser for parte de uma ferramenta maior, essa equipe definiria os requisitos do ponto de vista do usuário e a integração do parser no sistema.
Atualmente, o projeto parece estar focado na fase de desenvolvimento técnico do parser em si.

7. Fluxo do Projeto (Desenvolvimento e Implementação)
Considerando o estado atual, o fluxo do projeto (em termos de desenvolvimento) pode ser visto como:

Definição de Requisitos (Concluída): Entendimento da estrutura de entrada (HTML + tags personalizadas) e da estrutura de saída JSON desejada. O esboço visual e o exemplo de JSON foram cruciais aqui.
Design da Solução (Em Andamento/Iteração): Escolha da abordagem de parsing (Regex + DOM API em JavaScript).
Implementação Inicial (Concluída/Em Testes): Desenvolvimento do script parseCustomHtml.
Testes e Refinamento (Fase Atual/Próxima Fase): Testar o script com diversos exemplos de entrada, incluindo casos limite e variações, para garantir a precisão e robustez. Refinar as expressões regulares e a lógica de manipulação do DOM conforme necessário.
Tratamento de Erros (Próxima Fase): Implementar mecanismos para lidar com entradas malformadas ou inesperadas.
Documentação (Em Andamento): Como este dossiê.
Integração (Futuro): Se aplicável, integrar o parser em um sistema maior (CMS, plataforma de aprendizado, etc.).
Manutenção e Evolução (Futuro): Corrigir bugs, adaptar-se a novas necessidades (novas tags, mudanças na estrutura JSON).
O "fluxo do projeto" em termos de dados dentro do parser já foi descrito na Seção 3.3.

8. Desafios Identificados e Considerações Técnicas
8.1. Robustez do Parser
Expressões Regulares: Embora poderosas, regex podem se tornar complexas e frágeis, especialmente para estruturas aninhadas ou com muitas variações. Casos de tags malformadas ou aninhamento incorreto de tags personalizadas podem quebrar o parser ou levar a resultados incorretos.
Variações no HTML: O HTML escrito por humanos pode ter pequenas variações (espaços extras, capitalização de tags HTML) que o parser DOM do navegador geralmente lida bem, mas a lógica personalizada ao redor pode precisar de atenção.
8.2. Flexibilidade e Escalabilidade
Novas Tags: Adicionar suporte a novas tags personalizadas exigiria modificações no código, principalmente nas expressões regulares e na lógica de mapeamento.
Mudanças na Estrutura JSON: Alterações no esquema de saída JSON também demandariam atualizações no código.
8.3. Tratamento de Erros e Casos Inesperados
A versão atual do script pode não ter um tratamento de erros robusto. O que acontece se uma tag {{secao}} não for fechada? Ou se uma tag esperada estiver ausente? Um bom parser deve ser capaz de reportar erros de forma útil ou lidar graciosamente com eles.

8.4. Dependência do DOM (para a solução JavaScript)
A utilização da API DOM implica que o script JavaScript precisa ser executado em um ambiente que forneça essa API (um navegador web ou um ambiente Node.js com uma biblioteca como jsdom). Isso pode ser uma limitação se o parser precisar ser usado em outros contextos.

9. Próximos Passos e Evolução Potencial
Testes Abrangentes: Criar um conjunto de testes com diversas entradas válidas e inválidas para garantir a corretude e identificar falhas.
Melhorar Tratamento de Erros: Adicionar lógica para detectar e reportar problemas na string de entrada.
Modularização: Refatorar o código em módulos menores e mais gerenciáveis, se necessário.
Configurabilidade: Considerar tornar o parser mais configurável, talvez permitindo a definição de tags e regras de mapeamento através de um objeto de configuração, em vez de hardcoding.
Parser Alternativo: Para cenários mais complexos ou que exijam maior robustez e independência do DOM, poderia ser explorada a criação de um parser mais formal (ex: usando técnicas de análise léxica e sintática, ou bibliotecas de parsing).
Interface de Usuário: Se houver necessidade de usuários não técnicos interagirem com o parser, uma interface simples poderia ser desenvolvida.
10. Conclusão
O projeto de conversão de HTML com tags personalizadas para JSON atende a uma necessidade clara de estruturação de conteúdo para processamento maquinal. A abordagem atual baseada em JavaScript, expressões regulares e a API DOM é uma solução pragmática para o escopo definido, especialmente se o ambiente de execução for um navegador ou Node.js com suporte a DOM. O esboço inicial forneceu uma base visual importante para a estrutura lógica. Os principais desafios residem na robustez frente a variações na entrada e na manutenibilidade à medida que os requisitos evoluem. Com testes adequados e potenciais refinamentos, o parser pode se tornar uma ferramenta valiosa para o gerenciamento do conteúdo especificado.
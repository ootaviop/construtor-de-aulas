
MENSAGEM 1
-- # --
Eu trabalho em uma empresa que vende cursos EAD para serem feitos pelos alunos via plataforma Moodle.

As aulas são escritas pela equipe de conteúdo usando o Google Docs, e eles enviam para a minha equipe esse documento, solicitando a construção dessa aula em HTML, CSS e JS, para posteriormente subir esse conteúdo no Moodle.

Está anexado um exemplo de uma das aulas escritas com o Google Docx.

Perceba que o documento .docx possui tags envolvendo parte do conteúdo. Atualmente, a existência dessas tags permite que meu script(que também está anexado, apenas para sua compreensão) parta do texto extraído do docx para montar o html dinamicamente, de acordo com os templates html de cada componente. Porém estou enfrentando muitos problemas com o código atual. Não sei exatamente se é por causa de as tags que estou usando para definir os componentes no docx usarem os caracteres '[' e ']', ou se é por outro motivo, porém é fato que o código atual está muito confuso e não está funcionando da maneira que deveria. Digo, para alguns componentes o código não está os identificando da maneira correta, e em outros, não há uma regra clara.

Por exemplo, o componente seção, denotado atualmente por [SECAO] serve como um delimitador, isto é, o html correspondente a esse componente possui o sistema de grids necessário para formatar os espaçamentos da aula, porém me parece que o código atual não está sabendo lidar com ele da forma certa.

Além disso, quando fui adicionar outros componentes eu não me atentei a definir regras claras para eles. Por exemplo, quando fui adicionar a lógica de construção do componente [VIDEO] eu não soube dizer ao sistema por meio do código que se esse componente fosse encontrado no documento fora de um par de tags [SECAO], logo, o código deveria adicionar esse delimitador automaticamente, visto que, [SECAO] é um delitador necessário para todos os componentes, isto é, nenhum componente entra na aula fora das grids, ou seja, nenhum pode entrar fora do componente [SECAO].

Quando eu pedi ajuda a outra IA com esse código, eu senti falta que ela me indagasse absolutamente tudo a respeito do componente que eu solicitava a criação da lógica a ser inserida no código. Ficava muito 'em aberto', sabe? Eu não dizia, ela não me perguntava e não me incitava a responder e portanto foi um desastre. Estou com esse projeto parada há bastante tempo e preciso de sua ajuda para tirarmos isso do papel. 

Portanto, quero muito que você me pergunte absolutamente tudo a respeito do que estamos fazendo, porque estamos fazendo, e para que estamos fazendo, entende? Acho que dessa forma será mais difícil deixar partes do sistema passarem.
-- # --














MENSAGEM 2
--#--

Antes de começar a gerar respostas para minhas perguntas, tire todas as suas dúvidas. Se faltam informações, me pergunte! Tenha a certeza de ter todas as informações necessárias para que o desenvolvimento desse projeto seja impecável. 

Outra coisa que é importante dizer é que essas aulas são resultado do trabalho de duas equipes: a Equipe de Conteúdo e a Equipe de Design e Audiovisual;

A equipe de conteúdo é quem escreve o texto das aulas, escolhe os recursos que serão usados e sugere por meio das tags no documento quais componentes serão utilizados para exibir o conteúdo. 

A equipe de design por sua vez é responsável por criar a identidade visual do projeto, escolher as cores, configurar a plataforma, prototipar e desenvolver o código dos componentes que serão utilizados nas aulas. Atualmente, ela também é responsável por pegar o documento .docx e converter ele para HTML, CSS e JS. Isso significa que um colaborador da equipe de design e audiovisual, no caso eu, abre o documento .docx, abre o bootstrap studio(sistema que usamos para codar as aulas de forma mais rápida) e copia e cola os textos do docx para o bootstrap, por exemplo, se no documento é solicitado um componente sanfona, eu sou o responsável por desenvolver o código do componente, e copiar e colar os textos do documento para dentro do bootstrap. Esse trabalho é muito custoso e gasta muito tempo, e como muitos dos cursos aqui vendidos são replicados para diversos estados e municípios, mudando nos textos apenas detalhes pontuais, como o nome do estado, o nome da cidade e as referências da aula, eu pensei que a automatização seria muito eficaz e passível de ser feita.    

---

O objetivo final é gerar apenas o HTML/CSS/JS. Atualmente não desejo fazer essa integração com o Moodle.

Dentro do conteúdo das aulas podem haver imagens, vídeos, PDF's e outros recursos, tanto para donwload quanto para consulta por meio das URL's. A forma com que isso é feito varia. Vídeos, por exemplo, podem entrar na aula via embed, isto é, inseridos diretamente no corpo da aula, ou por meio de links externos. (Geralmente usamos vídeos do Youtube e do Vimeo); Diversos componentes como flip-cards e carrosséis podem contar com imagens personalizadas, as quais precisam ser feitas pela equipe de Design e Audiovisual (minha equipe), porém, combinei com minha chefia que o código responsável pela conversão do conteúdo de docx para HTML/CSS/JS não se preocuparia com essas imagens, uma vez que, ao momento que a aula é escrita(pela equipe de conteúdo), essas imagens ainda não foram criadas; minha sugestão foi que em componentes que possuíssem imagens, o src deveria vir vazio, e as imagens seriam inseridas depois pela equipe de design.

Áudios, por sua vez, são tratados dentro da aula como sendo podcasts, e seus links são possíveis de serem 'buscados' apenas por um membro da equipe de design; isso faz do podcast um componente atípico, uma vez que sua estrutura possui coisas como, "Nome do Palestrante", "Tema" e "Formação do Palestrante" que são escritos diretamente no documento pelo responsável da equipe de conteúdo, mas o link propriamente dito do podcast só é definido pelo membro da equipe de design quando ele pega para codar a aula. PDF's e arquivos para download são outro caso diferenciado, visto que possuímos nosso próprio servidor, e todos(ou quase) os documentos que disponibilizamos para download precisam ser inseridos no servidor, para então terem um link que por sua vez será disponibilizado na aula; um exemplo seria "https://recursos-moodle.caeddigital.net/projetos/cursos/PROSA/2025-1/content/doc/PROSA_LP_Anos%20Iniciais%20e%20Anos%20Finais%20do%20Ensino%20Fundamental.pdf";

Sinceramente, eu penso que nesses casos onde são requisitadas imagens, podcasts, vídeos e PDF's, o código não deve se preocupar com eles, uma vez que para esses recursos sempre será necessário que um colaborador da equipe de design pare o que está fazendo para desenvolver a imagem, ou editar e subir o vídeo em uma plataforma de vídeo (como vimeo ou youtube), subir determinado arquivo no servidor para só então obter seu link final; ou seja, é necessário termos em mente que haverão componentes que sim, o código poderá lidar totalmente com eles, como por exemplo, parágrafos, títulos, sanfonas, haverão outros que o código lidará parcialmente, isto é, no caso de componentes como o 'carrossel' que possui imagem e texto, e digo parcialmente pois o código deverá lidar e fazer o parsing do texto de cada slide do carrossel, mas com relação à imagem atrelada a cada slide, o código deverá apenas adicional o código da imagem com os atributos vazios para que então posteriormente alguém da equipe de design pegue a aula pré-pronta e adicione os itens faltantes.

---

Vale ressaltar que o scritp de conversão faz parte de um sistema que eu desenvolvi em Electron, que nada mais é que uma interface fluida que permite ao usuário acessar a pasta no google drive que contém todos os arquivos .docx das aulas e selecionar a aula que deseja gerar o html(segue anexada a imagem da tela onde isso acontece). Como esse sistema foi feito por mim há pouquíssimo tempo, quem o utiliza por hora sou apenas eu e outro membro da equipe de design; de fato, é de meu interesse disponibilizar esse sistema para a equipe de conteúdo em breve, uma vez que ele permite a quem o utiliza visualizar um preview da aula já com os componentes certinhos e com o conteúdo já com o parse feito. Porém, como eu ainda não consegui fazer com que todos os componentes funcionem corretamente, é inviável entregar esse sistema nas mãos de outra equipe. Com relação à robustez do sistema, é muito importante lembrar que esse esforço - de transformar um conteúdo em texto para html, conta tanto com o script que faz o parsing, mas que ele é dependente que o documento esteja com as tags ao entorno do conteúdo, visto que, como seria possível que o código entendesse que precisa fazer o parsing de uma sanfona, se não houver uma indicação disso - precisa ser grande, uma vez que quem escreve a aula, e também, coloca as tags não é da equipe de design e audiovisual, mas sim da equipe de conteúdo.

---

Com relação à sua pergunta sobre restrições específicas impostas pela plataforma Moodle, não há. Nós temos total liberdade de definir classes e estrutura.

---
--#--
2.

Você me pediu uma lista completa das tags que pretendemos usar. Certo, vou te fornecer. Mas logo te adianto que todas essas tags e componentes que vou te passar são referentes à um template específico, isto é, como eu disse anteriormente, um de nossos trabalhos aqui na equipe de design é fazer essas aulas digitais; e como já era de se esperar, componentes são refeitos, identidades visuais novas são criadas e estruturas mudam com o tempo; porém, como essa automação foi algo nunca antes feito aqui na minha equipe, eu e minha chefe decidimos trabalhar apenas com um template(visando facilitar a minha vida e lidar com menos variantes ao mesmo tempo), porém é fato que esse sistema dando certo, mais templates serão criados, porém isso não é uma preocupação agora.

Segue a lista dos componentes: 
"""
1. [TOPICO]
2. [TITULO_TOPICO]
3. [TITULO_AULA]
4. [SECAO]
5. [NEGRITO]
6. [ITALICO]
7. [LISTA_NUMERADA] E [ITEM_LISTA_NUMERADA]
8. [LISTA_MARCADORES] E [ITEM_LISTA_MARCADORES]
9. [CARROSSEL] E [ITEM_CARROSSEL]
10. [CARROSSEL_IMG] E [ITEM_CARROSSEL_IMG]
11. [DONWLOAD]
12. [CITACAO]
13. [ANTERIOR]
14. [PROXIMO]
15. [MODAL]
16. [TOOLTIP]
17. [CARD_MODAL]
18. [INFOGRAFICO]
19. [IMAGEM]
20. [MURAL]
21. [DESTAQUE]
22. [LINK]
23. [DOCUMENTO]
24. [FLIP_CARD], [FRENTE] E [VERSO]
25. [FLIP_CARD_IMG], [FRENTE] E [VERSO]
26. [VIDEO]
27. [SANFONA], [ITEM_SANFONA], [TITULO] E [CONTEUDO]
28. [REFERENCIAS]
29. [PODCAST]
"""
---
Atualmente todas as tags seguem o padrão [NOME_TAG]conteúdo[/NOME_TAG]. De fato, há tags multiníveis, como é o caso da [SANFONA],  onde cada item da sanfona é representado com [ITEM_SANFONA], e cada [ITEM_SANFONA] possui uma tag [TITULO] e uma tag [CONTEUDO]. Essas tags precisam desses múltiplos níveis pois tratam-se de componentes com elementos filhos. Outro exemplo é a tag [LISTA_NUMERADA] que possui filhos denominados [ITEM_LISTA_NUMERADA]. Seria algo similar ao que a tag html 'li' é para a tag mãe 'ol'.
---
Com relação ao uso de outros delimitadores, eu estou completamente aberto! A escolha dos colchetes foi totalmente arbitrátria e pode ser modificada se houver um motivo plausível. Com relação a isso podemos ter total liberdade.
---
No caso das tags que precisam de atributos como links externos, como [IMAGEM], [VIDEO], [DOCUMENTO], [DOWNLOAD], [INFOGRAFICO] e [LINK] uma decisão precisa ser tomada. Como disse anteriormente, elementos como imagens, pdf's e vídeos precisam, sem exceção, de uma curadoria da equipe técnica (Design e Audiovisual), visto que a equipe de conteúdo não possui nenhum desses links quando vão escrever o conteúdo. Quem detém tais links é verdadeiramente a equipe de Design e Audiovisual, e por esse motivo, acredito que pode ser interessante quando essas tags aparecerem no documento, o parse simplesmente se comportar de maneira diferente, visto que, uma demanda para a equipe de Design é gerada quando elas aparecerem. Dessa forma nós evitamos maiores problemas com essas tags, e deixamos para que alguém da equipe técnica lide com isso quando a aula realmente for para o ar. Eu preciso te lembrar que esse script servirá primordialmente para facilitar e muito o trabalho da equipe de Design e Audiovisual, porém não é necessário que ele substitua totalmente, uma vez que recursos como inforgráficos, imagens e vídeos, carecem do trabalho ainda imprescindível de um membro da equipe técnica.
---
Com relação a criação dessas tags no docx, eu devo lhe passar a informação de que eu, pensando nesse trabalho que seria para eles digitarem tag a tag, desenvolvi através do Google Apps Script um script e uma sidebar diretamente no Google Docs. Através dessa sidebar, os usuários podem simplesmente selecionar o texto que desejam e adicionar a tag desejada. Por exemplo, se o usuário desejar adicionar um par de tags [NEGRITO], ao invés de ele digitar, basta que ele selecione o texto que deseja que fique em negrito e depois clicar no botão 'Negrito' na sidebar. O script fará o trabalho de colocar o par de tags em torno do texto selecionado. Para casos como a [SANFONA], que como eu bem disse, é um componente mais complexo, o script também é capaz de lidar com ela. Se o usuário quiser adicionar uma sanfona, basta que ele clique em 'Sanfona'; o script exibirá uma caixa de diálogo na tela perguntando a ele quantos elementos deseja que a sanfona tenha; ele usará o teclado para digitar um número, e o script colocará a quantidade de tags necessária.
---

--#--

3.

3.1.
A estrutura HTML exata do componente [SECAO] é: 
```
    <div class="container c-aula-container curso secao1">
        <div class="row row-txt">
            <div class="col-sm-12 col-md-10 col-lg-8 col-xl-8">
                <div>
                    {{CONTEUDO}}
                </div>
                <div class="separador-menor"></div>
            </div>
        </div>
    </div>
```
---
3.2.
De fato, há duas exceções. E é preciso prestar bastante atenção nelas. Elas se localizam especificamente no início e no final da tag body.

No início há sempre o código:
```
 <div class="container c-aula-container curso secao1">
        <div class="row">
            <div class="col">
                <div class="separador-menor"></div>
                <div class="d-center">
                    <img class="img-topo-aula"
                        src="https://recursos-moodle.caeddigital.net/projetos/2024/caed/selo-aplicador/img/topo.svg">
                </div>
                <div class="separador-menor"></div>
                <div class="titulo-topico-box">
                    <h5>{{TITULO_TOPICO}}</h5>
                </div>
                <div class="separador-menor"></div>
                <div class="row row-topo-titulo">
                    <div class="col-sm-12 col-md-10 col-lg-8 col-xl-8">
                        <h1>{{TITULO_AULA}}</h1>
                        <div class="separador-medio"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
```
Essa é uma parte fixa. Digo, a imagem é sempre a mesma e a estrutura é sempre a mesma. As únicas coisas que mudam nesse trecho são as duas tags {{TITULO_TOPICO}} e {{TITULO_AULA}}; 

A outra parte fixa é localizada imediatamente antes do fechamento da tag body:
```
    <div class="container c-aula-container curso secao1">
        <div class="row">
            <div class="col">
                <div style="display: flex;gap: 30px;justify-content: space-between;">

                    <div class="topico-anterior">
                        <span data-link="#">{{ANTERIOR}}</span>
                        <svg width="20" height="20" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M14.028 0.97199C6.833 0.97199 1.00031 6.80468 1.00031 13.9997C1.00031 21.1947 6.833 27.0273 14.028 27.0273C21.223 27.0273 27.0557 21.1947 27.0557 13.9997C27.0557 6.80468 21.223 0.971989 14.028 0.97199Z"
                                stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M14.0283 8.7888L8.81725 13.9999L14.0283 19.2109" stroke="var(--cor-primaria)"
                                stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M19.2393 13.9995L8.81712 13.9995" stroke="var(--cor-primaria)"
                                stroke-linecap="round" stroke-linejoin="round"></path>
                        </svg>
                    </div>


                    <div class="proximo-topico">
                        <span data-link="#">{{PROXIMO}}</span>
                        <svg width="20" height="20" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M14.0277 27.0275C21.2227 27.0275 27.0554 21.1948 27.0554 13.9998C27.0554 6.80486 21.2227 0.972168 14.0277 0.972168C6.83269 0.972168 1 6.80486 1 13.9998C1 21.1948 6.83269 27.0275 14.0277 27.0275Z"
                                stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M14.0273 19.2107L19.2384 13.9996L14.0273 8.78857" stroke="var(--cor-primaria)"
                                stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M8.81641 14H19.2385" stroke="var(--cor-primaria)" stroke-linecap="round"
                                stroke-linejoin="round"></path>
                        </svg>
                    </div>

                </div>
                <div class="separador-medio"></div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js"></script>
    <script src="https://recursos-moodle.caeddigital.net/projetos/2024/municipios/js/municipios.js"></script>

    <script src="https://recursos-moodle.caeddigital.net/projetos/2024/componentes/js/comp-carousel.js"
        type="text/javascript"></script>
    <script src="https://recursos-moodle.caeddigital.net/projetos/2024/componentes/js/comp-toggle-topicos.js"
        type="text/javascript"></script>
    <script src="https://recursos-moodle.caeddigital.net/projetos/2024/componentes/js/comp-sanfona.js"
        type="text/javascript"></script>
    <script src="https://recursos-moodle.caeddigital.net/projetos/2024/componentes/js/comp-podcast.js"
        type="text/javascript"></script>
    <script src="https://recursos-moodle.caeddigital.net/projetos/2024/componentes/js/comp-id-to-modal.js"
        type="text/javascript"></script>
    <script src="https://w.soundcloud.com/player/api.js" async=""></script>
```
E as únicas partes que mudam nesse trecho são os textos das tags [ANTERIOR] e [PROXIMO]. Pois elas podem ser: 'Próximo Tópico', 'Questionário Avaliativo', 'Apresentação' e etc.
Quem define o texto que esses botões de navegação vão ter é o responsável pela aula da equipe de conteúdo.

Essas são as únicas duas partes mais 'engessadas' e que não precisam estar envolvidas em pares de tags [SECAO].
---
3.3.
Se houverem componentes fora de qualquer [SECAO] o código deve ter o comportamento de encapsular automaticamente eles em um par de tags [SECAO].
---
3.4.
Uma [SECAO] não pode conter outras [SECAO]s em aninhamento. Apesar de que, uma [SECAO] pode conter diversos outros componentes aninhados.
---
3.5.
Não. Como disse anteriormente, estamos trabalhando apenas com um template, e nesse caso não há possibilidade de múltiplas variações do componente [SECAO];
---

--#--

Seguem as respostas dos itens 1, 2 e 3. Baseando-se já nas informações que eu passei nos itens acima, reescreva as perguntas ainda faltantes.

--#--

















MENSAGEM 3
--#--


Delimitadores:

Eu sei que meu script já está inserindo as tags usando '[' e ']', porém eu gostei muito da ideia de usar tags como:

```
{{secao}}
{{/secao}}
```

Eu achei muito eficaz! Por mim, poderíamos propor essa mudança logo de cara.

-----

4.

"""[NEGRITO]"""
a) HTML: 
```
<strong class="negrito">{{CONTEUDO}}</strong>
```

b) Apenas texto, [TOOLTIP] e [MODAL_LINK]

c) Essa tag pode aparecer em qualquer lugar onde houver texto, com exceção do conteúdo das tags [TITULO_TOPICO], [TITULO_AULA], [ANTERIOR] e [PROXIMO].

d) Não aplicável.
"""



"""[ITALICO]"""
a) HTML: 
```
<i class="italico">{{CONTEUDO}}</i>
```

b) Apenas texto, [TOOLTIP] e [MODAL_LINK]

c) Essa tag pode aparecer em qualquer lugar onde houver texto, com exceção do conteúdo das tags [TITULO_TOPICO], [TITULO_AULA], [ANTERIOR] e [PROXIMO].

d) Não aplicável.
"""




"""[LISTA_NUMERADA]"""
a) HTML:
```
<div>
    <ul class="lista-numero">
        <li>{{CONTEUDO}}</li>
    </ul>
</div>
```

(Cada [ITEM_LISTA_NUMERADA] é representado por um li dentro da ul.lista-numero)

b) Podem haver as tags: [NEGRITO], [ITALICO], [LINK], [DOWNLOAD], [TOOLTIP] e [MODAL_LINK]

c) [CITACAO], [SECAO], [ITEM_CARROSSEL], [ITEM_CARROSSEL_IMG], [MODAL], [DESTAQUE], [ITEM_SANFONA]->[CONTEUDO];

d) Não aplicável.

"""






"""[LISTA_MARCADORES]"""
a) HTML:
```
<div>
    <ul class="lista-check">
        <li>{{CONTEUDO}}</li>
    </ul>
</div>
```

(Cada [ITEM_LISTA_MARCADORES] é representado por um li dentro da ul.lista-check)

b) Podem haver as tags: [NEGRITO], [ITALICO], [LINK], [DOWNLOAD], [TOOLTIP] e [MODAL_LINK]

c) [CITACAO], [SECAO], [ITEM_CARROSSEL], [ITEM_CARROSSEL_IMG], [MODAL], [DESTAQUE], [ITEM_SANFONA]->[CONTEUDO];

d) Não aplicável.

"""





"""[CARROSSEL]"""
a) HTML:
```
<div>
    <p class="dica-navegacao">Use as setas para navegar</p>
</div>
<div>
    <div class="carousel slide" data-ride="carousel" data-interval="false"
        id="carousel-1">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <div class="content">
                    <div class="d-center area-util">
                        <div>
                            <p>{{CONTEUDO_SLIDE_1}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <div class="content">
                    <div class="d-center area-util">
                        <div>
                            <p>{{CONTEUDO_SLIDE_2}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <div class="content">
                    <div class="d-center area-util">
                        <div>
                            <p>{{CONTEUDO_SLIDE_3}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <div class="content">
                    <div class="d-center area-util">
                        <div>
                            <p>{{CONTEUDO_SLIDE_4}}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
        <a class="carousel-control-prev" href="#carousel-1" role="button" data-slide="prev"><span
                    class="carousel-control-prev-icon"></span><span
                    class="sr-only">Previous</span></a><a class="carousel-control-next"
                href="#carousel-1" role="button" data-slide="next"><span
                    class="carousel-control-next-icon"></span><span class="sr-only">Next</span></a>
        </div>
        <ol class="carousel-indicators">
            <li data-target="#carousel-1" data-slide-to="0" class="active"></li>
            <li data-target="#carousel-1" data-slide-to="1" class=""></li>
            <li data-target="#carousel-1" data-slide-to="2" class=""></li>
            <li data-target="#carousel-1" data-slide-to="3" class=""></li>
        </ol>
    </div>
</div>
```


b) [CARROSSEL] contém apenas [ITEM_CARROSSEL]. [ITEM_CARROSSEL] pode conter: texto, [NEGRITO], [ITALICO], [LINK], [DOWNLOAD], [LISTA_NUMERADA]<->[ITEM_LISTA_NUMERADA], [LISTA_MARCADORES]<->[ITEM_LISTA_MARCADORES], [TOOLTIP] e [MODAL_LINK]

c) [SECAO], [CITACAO], [MODAL], [DESTAQUE], [SANFONA]<->[ITEM_SANFONA]<->[CONTEUDO]

d) Não se aplica

e) : Informações Adicionais -> 

"""




"""[CARROSSEL_IMG]"""
a) HTML:
```
<div>
    <p class="dica-navegacao">Use as setas para navegar</p>
</div>
<div>
    <div class="carousel slide carousel-img" data-ride="carousel" data-interval="false"
        id="carousel-1">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <div class="content">
                    <div class="d-center area-util">
                        <img class="img-carousel"
                            src="#">
                        <div>
                            <p>{{CONTEUDO_SLIDE_1}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <div class="content">
                    <div class="d-center area-util">
                        <img class="img-carousel"
                            src="#">
                        <div>
                            <p>{{CONTEUDO_SLIDE_2}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <div class="content">
                    <div class="d-center area-util">
                        <img class="img-carousel"
                            src="#">
                        <div>
                            <p>{{CONTEUDO_SLIDE_3}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item">
                <div class="content">
                    <div class="d-center area-util">
                        <img class="img-carousel"
                            src="#">
                        <div>
                            <p>{{CONTEUDO_SLIDE_4}}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
        <a class="carousel-control-prev" href="#carousel-1" role="button" data-slide="prev"><span
                    class="carousel-control-prev-icon"></span><span
                    class="sr-only">Previous</span></a><a class="carousel-control-next"
                href="#carousel-1" role="button" data-slide="next"><span
                    class="carousel-control-next-icon"></span><span class="sr-only">Next</span></a>
        </div>
        <ol class="carousel-indicators">
            <li data-target="#carousel-1" data-slide-to="0" class="active"></li>
            <li data-target="#carousel-1" data-slide-to="1" class=""></li>
            <li data-target="#carousel-1" data-slide-to="2" class=""></li>
            <li data-target="#carousel-1" data-slide-to="3" class=""></li>
        </ol>
    </div>
</div>
```


b) [CARROSSEL_IMG] contém apenas [ITEM_CARROSSEL_IMG]. [ITEM_CARROSSEL_IMG] pode conter: texto, [NEGRITO], [ITALICO], [LINK], [DOWNLOAD], [LISTA_NUMERADA]<->[ITEM_LISTA_NUMERADA], [LISTA_MARCADORES]<->[ITEM_LISTA_MARCADORES], [TOOLTIP] e [MODAL_LINK]

c) [SECAO], [CITACAO], [MODAL], [DESTAQUE], [SANFONA]<->[ITEM_SANFONA]<->[CONTEUDO]

d) O atributo src da img.img-carousel deve ser igual a "#", para que um membro da equipe de conteúdo possa posteriormente adicionar a imagem correta. 

"""




"""[DOWNLOAD]"""
a) HTML:
```
<!-- {{CONTEUDO}} -->
<p>INSERIR LINK PARA DOWNLOAD AQUI: {{CONTEUDO}}</p>
```

b)Apenas texto.

c) [SECAO], [CITACAO], [MODAL], [DESTAQUE], [SANFONA]<->[ITEM_SANFONA]<->[CONTEUDO], [LISTA_NUMERADA]<->[ITEM_LISTA_NUMERADA], [LISTA_MARCADORES]<->[ITEM_LISTA_MARCADORES], [CARROSSEL]<->[ITEM_CARROSSEL], [CARROSSEL_IMG]<->[ITEM_CARROSSEL_IMG],  [FLIP_CARD]<->[VERSO]

d) Não se aplica. Esse componente terá seu código adicionado posteriormente pelo membro responsável da equipe de Design e Audiovisual.

"""





"""[CITACAO]"""
a) HTML:

```
<div>
<div class="citacao-texto">
    <p class="p-corpo p-citacao">{{CONTEUDO}}</p>
</div>
<div class="separador-medio"></div>
</div>
```

b) Dentro dessa tag podem haver conteúdos em texto, os quais, devem ser inseridos com a tag <p> e com as classes 'p-corpo' e 'p-citacao'; [NEGRITO], [ITALICO], [LINK], [IMAGEM], [MURAL], [DOWNLOAD], [LISTA_NUMERADA]<->[ITEM_LISTA_NUMERADA], [LISTA_MARCADORES]<->[ITEM_LISTA_MARCADORES], [TOOLTIP] e [MODAL_LINK];

c) [SECAO], [MODAL]

d) Não se aplica;

"""







"""[MODAL]"""

a) 

DOCX:
```
[MODAL]
[TITULO]{{TITULO_MODAL}}[/TITULO]
[CONTEUDO]{{CONTEUDO_MODAL}}[/CONTEUDO]
[/MODAL]
```



HTML:
```
<div class="modal fade" role="dialog" tabindex="-1" id="{{TITULO_MODAL}}">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header c-aula-container curso">
                    <h4 class="modal-title">{{TITULO_MODAL}}</h4><button class="close" type="button" aria-label="Close"
                        data-dismiss="modal"><span aria-hidden="true">×</span></button>
                </div>
                <div class="modal-body c-aula-container curso secao1">
                {{CONTEUDO_MODAL}}
                </div>
                <div class="modal-footer c-aula-container curso"><button class="btn btn-light" type="button"
                        data-dismiss="modal">Fechar</button></div>
            </div>
        </div>
    </div>
```

b) Qualquer tag com exceção de [TOPICO], [TITULO_TOPICO], [TITULO_AULA], [SECAO], [ANTERIOR], [PROXIMO], [CARD_MODAL], [REFERENCIAS] e [MODAL_LINK] e obviamente a própria tag [MODAL].

c) Somente dentro da tag [SECAO].

d) A Equipe de Design poderá intervir no id do elemento pai(div.modal.fade). Inicialmente o id coincidirá com o valor de [TITULO_MODAL], mas poderá ser mudado pelo responsável da equipe de Design e Audiovisual caso haja necessidade.

e) : (Informação adicional) -> Esse componente trata-se do componente de mesmo nome (Modal) do framework Bootstrap. Ele serve para que sejam inseridos conteúdos fora do primeiro nível de leitura, isso significa que por causa desse comportamento, ele precisa de um outro elemento que seja capaz de ativá-lo, um elemento como [MODAL_LINK] ou [CARD_MODAL]; esses elementos conterão dois atributos: "data-toggle:'modal'" e "data-target:'#{{TITULO_MODAL}}'"; tais atributos são capazes de transformar o elemento <span> correspondente ao HTML de [MODAL_LINK] ou a div correspondente ao HTML de [CARD_MODAL] em gatilhos que abrirão o modal em questão.

"""





"""[TOOLTIP]"""
Esse componente ficará de fora por enquanto. Não é necessário que o código se preocupe muito com ele. Basta adicionar um comentário como colocado abaixo.

a) HTML:
```
<!-- TOOLTIP: {{CONTEUDO}} -->

```

b)--
c)--
d)--
"""


"""[CARD_MODAL]"""
Esse componente ficará de fora por enquanto. Não é necessário que o código se preocupe muito com ele. Basta adicionar um comentário como colocado abaixo.

a) HTML:
```
<!-- CARD_MODAL: {{CONTEUDO}} -->

```

b)--
c)--
d)--
"""





"""[INFOGRAFICO]"""
Esse componente ficará de fora por enquanto. Não é necessário que o código se preocupe muito com ele. Basta adicionar um comentário e um parágrafo com o texto como colocado abaixo.

a) HTML:
```
<!-- INFOGRAFICO -->
<p>INSERIR O INFOGRÁFICO AQUI</p>

```

b)--
c)--
d)--
"""






"""[IMAGEM]"""
a) HTML:
```
<div class="componente-imagem">
<img src="#" alt="{{CONTEUDO}}" class="img-fluid">
</div>
```

b) Texto para o atributo alt.
c) Pode aparecer dentro de [SECAO], [CITACAO], [MODAL]<->[CONTEUDO_MODAL], [DESTAQUE], [SANFONA]<->[ITEM_SANFONA]<->[CONTEUDO]
d)O atributo src deve vir igual a '#'.
"""





"""[MURAL]"""
a) HTML:
```
<div>
<div class="componente-mural" style="max-width: 100%;">
    <div class="card-mural">
        <div class="content-alfinete">
            <div class="alfinete"></div>
        </div>
        <div class="texto">
            <p>Seleção do conteúdo </p>
        </div>
    </div>
</div>
    <div class="separador-medio"></div>
</div>
```

b) [MURAL] contém apenas [ITEM_MURAL]. [ITEM_MURAL] pode conter texto, [NEGRITO] e [ITALICO];

c) Pode aparecer dentro de [SECAO], [CITACAO], [MODAL]<->[CONTEUDO_MODAL], [DESTAQUE]

d) Não se aplica
"""



"""[DESTAQUE]"""
a) HTML:

```
<div>
<div class="destaque-atencao">
    <div class="cabecalho">
        <div class="container-imagem"><svg width="57" height="57" viewBox="0 0 57 57" fill="none"
                xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M27.1642 9.4601C27.7211 8.36999 29.2789 8.36999 29.8358 9.46011L39.8047 28.9738L50.0682 49.0639C50.578 50.062 49.8531 51.2463 48.7324 51.2463H8.26761C7.14686 51.2463 6.42195 50.062 6.93183 49.0639L27.1642 9.4601Z"
                    stroke="var(--cor-primaria)" stroke-linejoin="round"></path>
                <path
                    d="M29.5 45.7463C31.433 45.7463 33 44.1793 33 42.2463C33 40.3133 31.433 38.7463 29.5 38.7463C27.567 38.7463 26 40.3133 26 42.2463C26 44.1793 27.567 45.7463 29.5 45.7463Z"
                    fill="var(--cor-secundaria)"></path>
                <path
                    d="M31.5 40.7463C31.5 42.6793 29.933 44.2463 28 44.2463C26.067 44.2463 24.5 42.6793 24.5 40.7463C24.5 38.8133 26.067 37.2463 28 37.2463C29.933 37.2463 31.5 38.8133 31.5 40.7463Z"
                    stroke="var(--cor-primaria)" stroke-linejoin="round"></path>
                <path d="M28 34.7463L28 21.7463" stroke="var(--cor-primaria)"
                    stroke-linejoin="round">
                </path>
                <path d="M28 34.7463L28 21.7463" stroke="black" stroke-opacity="0.2"
                    stroke-linejoin="round"></path>
                <path d="M10 48.7463H47.3737" stroke="var(--cor-primaria)" stroke-linecap="round"
                    stroke-linejoin="round" stroke-dasharray="2 2">
                </path>
                <path d="M27 14.7463L13 42.7463" stroke="var(--cor-primaria)" stroke-linecap="round"
                    stroke-linejoin="round" stroke-dasharray="2 2">
                </path>
                <path d="M35 24.1936L44 42.7463" stroke="var(--cor-primaria)" stroke-linecap="round"
                    stroke-linejoin="round" stroke-dasharray="2 2">
                </path>
            </svg>
        </div>
        <h4 style="margin-left: .5rem;">Destaque</h4>
    </div>
    <div class="corpo">
        {{CONTEUDO}}
    </div>
</div>
</div>
```

b) Dentro dessa tag podem haver conteúdos em texto, [NEGRITO], [ITALICO], [LINK], [IMAGEM], [MURAL], [DOWNLOAD], [LISTA_NUMERADA]<->[ITEM_LISTA_NUMERADA], [LISTA_MARCADORES]<->[ITEM_LISTA_MARCADORES], [TOOLTIP] e [MODAL_LINK];

c) [SECAO], [MODAL]

d) Não se aplica;

"""







"""[VIDEO]"""

a) HTML:

```
<div>
    <div class="embed-responsive embed-responsive-16by9">
        <iframe class="embed-responsive-item"
            src="#"></iframe>
    </div>
</div>

<!-- {{CONTEUDO}} -->
```

b) Somente texto. Mas ele deve ser adicionado como um comentário abaixo do HTML.

c) Apenas de [SECAO]

d) O atributo src deve vir igual a '#'.

"""


---!---

5. 

a) Eu desenvolvi em javascript. O código não está identificando todos os componentes. E mesmo quando identifica, às vezes formata-os incorretamente. Você perguntou quais bibliotecas ele atualemnte usa para ler o .docx, acho que vou fazer o seguinte para facilitar: vou te mandar o código atual na próxima mensagem, ok?

b e c) serão respondidas quando eu enviar o código atual para você.

d) O script recebe o texto cru, sem indicações de negritos ou itálicos.


--#--

6.

a) O css de todos os componentes está em um link só: "https://recursos-moodle.caeddigital.net/projetos/2024/municipios/css/municipios-2024.css";

b) Ele apenas precisa incluir os scripts e os arquivos de estilo.

c) Sim, o script precisa gerar esses códigos dinamicamente. Quando eu te enviar o código você vai ver a estratégia.


---------

AGUARDE QUE EU ENVIE O CÓDIGO ATUAL NA PRÓXIMA MENSAGEM PARA QUE VOCÊ TEÇA SUAS INTERPRETAÇÕES A RESPEITO DESSA RESPOSTA.

--#--

MENSAGEM 4 (AINDA NÃO ENVIADA)
-- # --

const fs = require("fs-extra");
const path = require("path");
const archiver = require("archiver");

/**
 * Expressões regulares reutilizáveis
 */
const REGEX = {
  // Detecta parágrafos vazios, com espaços, &nbsp; ou tags br
  EMPTY_PARAGRAPH: /<p>(\s|&nbsp;|<br\s*\/?>)*<\/p>/g,
  // Detecta formatação inline
  NEGRITO: /\[NEGRITO\](.*?)\[\/NEGRITO\]/g,
  ITALICO: /\[ITALICO\](.*?)\[\/ITALICO\]/g,
};

/**
 * Utilitários gerais para processamento de texto
 */
const Utils = {
  /**
   * Aplica formatação inline ao texto
   */
  applyInlineFormatting(text) {
    if (!text) return "";
    return text
      .replace(REGEX.NEGRITO, "<strong>$1</strong>")
      .replace(REGEX.ITALICO, "<i>$1</i>");
  },

  /**
   * Gera um ID único
   */
  generateUniqueId() {
    return Math.random().toString(36).substr(2, 9);
  },

  /**
   * Limpa espaços em branco e parágrafos vazios
   */
  cleanContent(content) {
    if (!content) return "";

    content = content
      // Normaliza quebras de linha
      .replace(/\r\n/g, "\n")
      .replace(/\r/g, "\n")
      // Remove múltiplas quebras de linha
      .replace(/\n{3,}/g, "\n\n")
      // Remove espaços em branco extras
      .replace(/[ \t]+/g, " ")
      // Remove parágrafos HTML vazios
      .replace(REGEX.EMPTY_PARAGRAPH, "")
      // Remove quebras de linha antes de fechamento de tags
      .replace(/\n+(\s*<\/[^>]+>)/g, "$1")
      // Remove quebras de linha depois de abertura de tags
      .replace(/(<[^>]+>\s*)\n+/g, "$1")
      .trim();
    return content;
  },

  /**
   * Verifica se uma linha é um elemento HTML
   */
  isHtmlElement(line) {
    return /^<\/?[a-zA-Z][^>]*>$/.test(line.trim());
  },

  /**
   * Processa parágrafos de forma inteligente
   * @param {string} content - Conteúdo a ser processado
   * @param {Function} formatFunc - Função opcional para formatação inline (se não fornecida, usa Utils.applyInlineFormatting)
   * @returns {string} - Conteúdo processado com parágrafos HTML
   */
  processParagraphs(content, formatFunc = null) {
    if (!content || content.trim() === "") return "";

    // Primeiro limpa o conteúdo
    content = this.cleanContent(content);

    // Remove tags [PARAGRAFO] se existirem
    content = content.replace(/\[PARAGRAFO\](.*?)\[\/PARAGRAFO\]/gs, "$1");

    // Define a função de formatação a ser usada
    const formatter = formatFunc || this.applyInlineFormatting;

    // Preserva tags HTML existentes
    const htmlPlaceholders = [];
    content = content.replace(/<[^>]+>.*?<\/[^>]+>/gs, (match) => {
      htmlPlaceholders.push(match);
      return `###HTML${htmlPlaceholders.length - 1}###`;
    });

    // Processa o texto, ignorando placeholders
    let processed = content
      .split("\n")
      .map((line) => {
        line = line.trim();
        if (!line) return "";
        if (line.startsWith("###HTML")) return line;

        // Aplica formatação inline antes de envolver em tags <p>
        return `<p>${formatter(line)}</p>`;
      })
      .filter((line) => line) // Remove linhas vazias
      .join("\n");

    // Restaura tags HTML
    processed = processed.replace(
      /###HTML(\d+)###/g,
      (_, index) => htmlPlaceholders[parseInt(index)]
    );

    return processed;
  },

  /**
   * Pré-processa o conteúdo bruto antes de qualquer processamento de tags
   * Remove espaços em branco e quebras de linha desnecessárias entre tags
   */
  preprocessRawContent(content) {
    if (!content) return "";

    return (
      content
        // Normaliza quebras de linha
        .replace(/\r\n/g, "\n")
        .replace(/\r/g, "\n")
        // Remove linhas em branco entre tags
        .replace(/\[(\/?\w+)\]\n+\[/g, "[$1][")
        // Remove linhas em branco no início/fim de tags
        .replace(/\[\w+\]\n+/g, (match) => match.replace(/\n+/g, "\n"))
        .replace(/\n+\[\/\w+\]/g, (match) => match.replace(/\n+/g, "\n"))
        // Remove múltiplas quebras de linha
        .replace(/\n{2,}/g, "\n")
        // Remove espaços em branco no início/fim
        .trim()
    );
  },
};

/**
 * Gerenciador de Templates HTML
 * Cada método processa um tipo específico de componente
 */
class TemplateManager {
  constructor() {
    this.titulos = {
      topico: "",
      aula: "",
    };
    this.navegacao = {
      anterior: null,
      proximo: null,
    };
  }

  /**
   * Processa o título do tópico
   * Tag: [TITULO_TOPICO]texto[/TITULO_TOPICO]
   * Template: <h5>texto</h5>
   */
  processTituloTopico(content) {
    this.titulos.topico = `<h5>${Utils.applyInlineFormatting(content)}</h5>`;
    return "";
  }

  /**
   * Processa o título da aula
   * Tag: [TITULO_AULA]texto[/TITULO_AULA]
   * Template: <h1>texto</h1>
   */
  processTituloAula(content) {
    this.titulos.aula = `<h1>${Utils.applyInlineFormatting(content)}</h1>`;
    return "";
  }

  /**
   * Processa uma seção
   * Tag: [SECAO]conteúdo[/SECAO]
   * Template:
   * <div class="container c-aula-container curso secao1">
   *   <section>
   *     <div class="row row-txt">
   *       <div class="col-sm-12 col-md-10 col-lg-8 col-xl-8">
   *         <div>conteúdo da seção</div>
   *         <div class="separador-menor"></div>
   *       </div>
   *     </div>
   *   </section>
   * </div>
   */
  processSecao(content) {
    // Se o conteúdo for nulo ou vazio, retorna vazio sem processar
    if (!content || content.trim() === "") return "";

    // Processa o conteúdo usando o utilitário centralizado
    const processedContent = Utils.processParagraphs(
      content,
      Utils.applyInlineFormatting
    );

    // Se após processamento o conteúdo estiver vazio, retorna vazio
    if (!processedContent || processedContent.trim() === "") return "";

    return `
      <div class="container c-aula-container curso secao1">
        <section>
          <div class="row row-txt">
            <div class="col-sm-12 col-md-10 col-lg-8 col-xl-8">
              <div>${processedContent}</div>
              <div class="separador-menor"></div>
            </div>
          </div>
        </section>
      </div>`.trim();
  }

  /**
   * Processa o link para o tópico anterior
   * Tag: [ANTERIOR link=/path]texto[/ANTERIOR] ou [ANTERIOR]texto[/ANTERIOR]
   * Template: <div class="topico-anterior"><span data-link="/path">texto</span><svg>...</svg></div>
   */
  processAnterior(content, link = null) {
    this.navegacao.anterior = {
      text: content || "Tópico Anterior",
      link: link || "#",
    };
    return "";
  }

  /**
   * Processa o link para o próximo tópico
   * Tag: [PROXIMO link=/path]texto[/PROXIMO] ou [PROXIMO]texto[/PROXIMO]
   * Template: <div class="proximo-topico"><span data-link="/path">texto</span><svg>...</svg></div>
   */
  processProximo(content, link = null) {
    this.navegacao.proximo = {
      text: content || "Próximo Tópico",
      link: link || "#",
    };
    return "";
  }

  /**
   * Gera o HTML de navegação
   */
  generateNavigationHTML() {
    if (!this.navegacao.anterior && !this.navegacao.proximo) return "";

    return `
      <div class="container c-aula-container curso secao1">
        <div class="row">
          <div class="col">
            <div style="display: flex;gap: 30px;justify-content: space-between;">
        ${
          this.navegacao.anterior
            ? `
          <div class="topico-anterior">
                  <span data-link="${this.navegacao.anterior.link}">${this.navegacao.anterior.text}</span>
            <svg width="20" height="20" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M14.028 0.97199C6.833 0.97199 1.00031 6.80468 1.00031 13.9997C1.00031 21.1947 6.833 27.0273 14.028 27.0273C21.223 27.0273 27.0557 21.1947 27.0557 13.9997C27.0557 6.80468 21.223 0.971989 14.028 0.97199Z" stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
              <path d="M14.0283 8.7888L8.81725 13.9999L14.0283 19.2109" stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
              <path d="M19.2393 13.9995L8.81712 13.9995" stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
            </svg>
                </div>
              `
            : ""
        }
        ${
          this.navegacao.proximo
            ? `
          <div class="proximo-topico">
                  <span data-link="${this.navegacao.proximo.link}">${this.navegacao.proximo.text}</span>
            <svg width="20" height="20" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M14.0277 27.0275C21.2227 27.0275 27.0554 21.1948 27.0554 13.9998C27.0554 6.80486 21.2227 0.972168 14.0277 0.972168C6.83269 0.972168 1 6.80486 1 13.9998C1 21.1948 6.83269 27.0275 14.0277 27.0275Z" stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
              <path d="M14.0273 19.2107L19.2384 13.9996L14.0273 8.78857" stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
              <path d="M8.81641 14H19.2385" stroke="var(--cor-primaria)" stroke-linecap="round" stroke-linejoin="round"></path>
            </svg>
                </div>
              `
            : ""
        }
            </div>
            <div class="separador-medio"></div>
          </div>
        </div>
      </div>`;
  }

  /**
   * Remove parágrafos vazios do HTML final
   */
  cleanEmptyParagraphs(html) {
    if (!html) return "";

    // Remove parágrafos vazios
    html = html.replace(REGEX.EMPTY_PARAGRAPH, "");

    return html;
  }

  /**
   * Gera o HTML completo da página
   */
  generateFullHTML(content) {
    // Primeiro gera o HTML base
    let html = `<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Aula Interativa</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
  <link href="https://use.typekit.net/bbo1gxr.css" rel="stylesheet" type="text/css">
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
  <link href="https://recursos-moodle.caeddigital.net/projetos/2024/municipios/css/municipios-2024.css" rel="stylesheet" type="text/css">
</head>
<body>
  <div class="container c-aula-container curso secao1">
    <div class="row">
      <div class="col">
        <div class="separador-menor"></div>
        <div class="d-center">
          <img class="img-topo-aula" src="https://recursos-moodle.caeddigital.net/projetos/2024/caed/selo-aplicador/img/topo.svg">
        </div>
        <div class="separador-menor"></div>
        <div class="titulo-topico-box">
          ${this.titulos.topico}
        </div>
        <div class="separador-menor"></div>
        <div class="row row-topo-titulo">
          <div class="col-sm-12 col-md-10 col-lg-8 col-xl-8">
            ${this.titulos.aula}
            <div class="separador-medio"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  ${content}

  ${this.generateNavigationHTML()}

  <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js"></script>
  <script src="https://recursos-moodle.caeddigital.net/projetos/2024/municipios/js/municipios.js"></script>
</body>
</html>`;

    // Aplica a limpeza final de parágrafos vazios
    return this.cleanEmptyParagraphs(html);
  }

  /**
   * Processa uma lista com marcadores
   * Tag: [LISTA][ITEM_LISTA]texto[/ITEM_LISTA][/LISTA]
   * Template: <ul class="lista-check"><li>texto</li></ul>
   */
  processLista(content) {
    // Limpa o conteúdo antes de processar
    content = Utils.cleanContent(content);

    // Processa cada item da lista
    const processedItems = content
      .replace(
        /\[ITEM_LISTA\](.*?)\[\/ITEM_LISTA\]/gs,
        (match, innerContent) => {
          return `<li>${Utils.applyInlineFormatting(innerContent.trim())}</li>`;
        }
      )
      .trim();

    return `<ul class="lista-check">${processedItems}</ul>`;
  }

  /**
   * Processa um flip card
   * Tag: [FLIP_CARD][FRENTE]texto[/FRENTE][VERSO]texto[/VERSO][/FLIP_CARD]
   * Template: <div class="caednew-flip-card">...</div>
   */
  processFlipCard(content) {
    // Limpa o conteúdo antes de processar
    content = Utils.cleanContent(content);

    let frontText = "";
    let backText = "";

    // Extrai o texto da frente
    const frontMatch = content.match(/\[FRENTE\](.*?)\[\/FRENTE\]/s);
    if (frontMatch) {
      frontText = Utils.applyInlineFormatting(frontMatch[1].trim());
    }

    // Extrai o texto do verso
    const backMatch = content.match(/\[VERSO\](.*?)\[\/VERSO\]/s);
    if (backMatch) {
      backText = Utils.applyInlineFormatting(backMatch[1].trim());
    }

    return `
      <div class="caednew-flip-card" tabindex="0">
        <div class="caednew-flip-card-inner">
          <div class="caednew-flip-card-front">
            <div class="box-imagem">
              <img src="#">
            </div>
            <div class="box-texto">
              <p class="titulo">${frontText}</p>
            </div>
          </div>
          <div class="caednew-flip-card-back">
            <p>${backText}</p>
          </div>
        </div>
      </div>`.trim();
  }
}

/**
 * Parser principal para processar documentos
 */
class AulaParser {
  constructor() {
    this.templateManager = new TemplateManager();
  }

  /**
   * Processa o conteúdo fornecido e retorna HTML
   */
  parse(inputData) {
    if (!inputData || typeof inputData !== "string") {
      console.error("Dados de entrada inválidos:", inputData);
      return "";
    }

    // Pré-processa o conteúdo bruto antes de qualquer processamento
    let content = Utils.preprocessRawContent(inputData);

    // Processa título do tópico
    content = this.processTag(
      content,
      "TITULO_TOPICO",
      (match, innerContent) => {
        this.templateManager.processTituloTopico(innerContent);
        return "";
      }
    );

    // Processa título da aula
    content = this.processTag(content, "TITULO_AULA", (match, innerContent) => {
      this.templateManager.processTituloAula(innerContent);
      return "";
    });

    // Processa flip cards
    content = this.processTag(content, "FLIP_CARD", (match, innerContent) => {
      return this.templateManager.processFlipCard(innerContent);
    });

    // Processa listas
    content = this.processTag(content, "LISTA", (match, innerContent) => {
      return this.templateManager.processLista(innerContent);
    });

    // Processa link anterior (com atributos)
    content = this.processTag(
      content,
      "ANTERIOR",
      (match, innerContent, attributes) => {
        const linkMatch = attributes
          ? attributes.match(/link=(.*?)(?:\s|$)/)
          : null;
        const link = linkMatch ? linkMatch[1].trim() : "";
        this.templateManager.processAnterior(innerContent, link);
        return "";
      },
      true
    );

    // Processa link anterior (sem atributos)
    content = this.processTag(content, "ANTERIOR", (match, innerContent) => {
      this.templateManager.processAnterior(innerContent);
      return "";
    });

    // Processa link próximo (com atributos)
    content = this.processTag(
      content,
      "PROXIMO",
      (match, innerContent, attributes) => {
        const linkMatch = attributes
          ? attributes.match(/link=(.*?)(?:\s|$)/)
          : null;
        const link = linkMatch ? linkMatch[1].trim() : "";
        this.templateManager.processProximo(innerContent, link);
        return "";
      },
      true
    );

    // Processa link próximo (sem atributos)
    content = this.processTag(content, "PROXIMO", (match, innerContent) => {
      this.templateManager.processProximo(innerContent);
      return "";
    });

    // Processa seções
    let processedSections = "";
    content = this.processTag(content, "SECAO", (match, innerContent) => {
      const processedSection = this.templateManager.processSecao(innerContent);
      processedSections += processedSection;
      return "";
    });

    // Processa parágrafos restantes fora de seções
    if (content.trim()) {
      processedSections += this.templateManager.processSecao(content);
    }

    // Gera o HTML final incluindo as seções processadas
    return this.templateManager.generateFullHTML(processedSections);
  }

  /**
   * Processa uma tag específica no conteúdo
   * @param {string} content - Conteúdo a ser processado
   * @param {string} tagName - Nome da tag a ser processada
   * @param {Function} processor - Função que processa o conteúdo da tag
   * @param {boolean} hasAttributes - Indica se a tag tem atributos
   * @returns {string} - Conteúdo processado
   */
  processTag(content, tagName, processor, hasAttributes = false) {
    // Se o conteúdo for nulo ou vazio, retorna vazio sem processar
    if (!content || content.trim() === "") return "";

    // Verifica se o nome da tag contém apenas caracteres válidos
    if (!tagName || typeof tagName !== "string") {
      console.error("processTag: Nome da tag inválido:", tagName);
      return content; // Retorna o conteúdo original sem processamento
    }

    // Validação de nome de tag (apenas letras, números e underscores são permitidos)
    const validTagNamePattern = /^[a-zA-Z0-9_]+$/;
    if (!validTagNamePattern.test(tagName)) {
      console.error(
        "processTag: Nome da tag contém caracteres inválidos:",
        tagName
      );
      return content; // Retorna o conteúdo original sem processamento
    }

    try {
      // Define o padrão de acordo com o tipo da tag (com ou sem atributos)
      const pattern = hasAttributes
        ? `\\[${tagName}\\s+(.*?)\\](.*?)\\[\\/${tagName}\\]`
        : `\\[${tagName}\\](.*?)\\[\\/${tagName}\\]`;

      const regex = new RegExp(pattern, "gs");

      // Processa a tag de acordo com o padrão
      return content.replace(regex, (match, p1, p2) => {
        try {
          // Se o conteúdo dentro da tag for vazio, retorna vazio
          const innerContent = hasAttributes ? p2 : p1;
          if (!innerContent || innerContent.trim() === "") return "";

          // Processa a tag com base em seus atributos
          if (hasAttributes) {
            const attributes = p1;
            return processor(match, innerContent.trim(), attributes);
          } else {
            return processor(match, innerContent.trim());
          }
        } catch (innerError) {
          console.error(
            `Erro ao processar conteúdo da tag [${tagName}]:`,
            innerError
          );
          return match; // Em caso de erro, mantém o conteúdo original da tag
        }
      });
    } catch (error) {
      console.error(
        `Erro ao criar ou executar regex para a tag [${tagName}]:`,
        error
      );
      return content; // Retorna o conteúdo original em caso de erro na regex
    }
  }
}

/**
 * Função principal que processa os tópicos e gera o HTML completo
 */
function processarAula(inputData) {
  try {
    if (!inputData || typeof inputData !== "string") {
      console.error("Dados de entrada inválidos:", inputData);
      return {
        error: "Dados de entrada inválidos ou vazios",
        htmls: [],
        titles: [],
      };
    }

    // Pré-processa o conteúdo bruto
    inputData = Utils.preprocessRawContent(inputData);

    // Separa o input em tópicos se contiver a tag [TOPICO]
    let topicos = [];
    if (inputData.includes("[TOPICO]")) {
      // Primeiro separamos por tag de abertura, depois removemos as tags de fechamento
      topicos = inputData
        .split(/\[TOPICO\]/g)
        .filter((t) => t.trim() !== "")
        .map((t) => t.replace(/\[\/TOPICO\]/g, "").trim());
    } else {
      // Se não tiver a tag [TOPICO], considera todo o conteúdo como um único tópico
      topicos.push(inputData);
    }

    if (!topicos.length) {
      console.error("Nenhum tópico encontrado no documento");
      return {
        error: "Nenhum tópico encontrado no documento",
        htmls: [],
        titles: [],
      };
    }

    const parser = new AulaParser();
    const htmls = [];
    const titles = [];

    // Processar cada tópico e extrair seus títulos
    topicos.forEach((topico, index) => {
      // Ignora tópicos vazios, apenas gerando um título padrão
      if (!topico) {
        htmls.push("");
        titles.push(`Tópico ${index + 1}`);
        return;
      }

      // Extrair o título do tópico antes de processá-lo
      const titleMatch = topico.match(
        /\[TITULO_TOPICO\](.*?)\[\/TITULO_TOPICO\]/s
      );
      const title =
        titleMatch && titleMatch[1]
          ? titleMatch[1].trim()
          : `Tópico ${index + 1}`;

      // Remover formatações inline do título para uso como nome de arquivo
      const cleanTitle = title
        .replace(REGEX.NEGRITO, "$1")
        .replace(REGEX.ITALICO, "$1");

      // Adicionar o título à lista
      titles.push(cleanTitle);

      // Processar o HTML do tópico
      htmls.push(parser.parse(topico));
    });

    // Limpa parágrafos vazios em todos os HTMLs gerados
    const cleanedHtmls = htmls.map((html) => {
      if (!html) return "";

      // Remove parágrafos vazios
      return html.replace(REGEX.EMPTY_PARAGRAPH, "");
    });

    return { htmls: cleanedHtmls, titles };
  } catch (error) {
    console.error("Erro ao processar aula:", error);
    return { error: error.message, htmls: [], titles: [] };
  }
}

/**
 * Cria um arquivo zip com os HTMLs gerados
 */
async function createZipFromHTMLs(htmls, outputPath) {
  return new Promise((resolve, reject) => {
    try {
      const output = fs.createWriteStream(outputPath);
      const archive = archiver("zip", {
        zlib: { level: 9 },
      });

      output.on("close", () => {
        console.log(`Arquivo zip criado: ${outputPath}`);
        resolve(outputPath);
      });

      archive.on("error", (err) => {
        reject(err);
      });

      archive.pipe(output);

      htmls.forEach((html, index) => {
        const fileName = `topico_${index + 1}.html`;
        archive.append(html, { name: fileName });
      });

      archive.finalize();
    } catch (error) {
      reject(error);
    }
  });
}

module.exports = {
  processarAula,
  createZipFromHTMLs,
};


-- # --